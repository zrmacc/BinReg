# Assess bias
est = plyr::aaply(Sim[,1:4],.margins=2,.fun=mean);
b = est - c(0,beta);
# Confidence intervals
v = plyr::aaply(Sim[,1:4],.margins=2,.fun=var);
L = b - 2*sqrt(v);
U = b + 2*sqrt(v);
# Plotting frame
df = data.frame("Coord"=colnames(Sim[,1:4]),"Bias"=b,"L"=L,"U"=U);
q = ggplot(data=df) + theme_bw() + geom_linerange(aes(x=Coord,ymin=L,ymax=U)) +
geom_point(aes(x=Coord,y=Bias),color="royalblue");
q = q + labs("x"="Coefficient","y"="Bias") + coord_flip() +
ggtitle("Bias in Coefficient Estimation");
print(q);
q
est = plyr::aaply(Sim[,5:8],.margins=2,.fun=mean);
est
emp = plyr::aaply(Sim[,1:4],.margins=2,.fun=var);
rho = log(est/v);
rho
bhat = plyr::aaply(Sim[,1:4],.margins=2,.fun=mean);
bhat = plyr::aaply(Sim[,1:4],.margins=2,.fun=mean);
b = bhat - c(0,beta);
library(ggplot2);
# Assess bias
bhat = plyr::aaply(Sim[,1:4],.margins=2,.fun=mean);
bias = bhat - c(0,beta);
# Confidence intervals
v = plyr::aaply(Sim[,1:4],.margins=2,.fun=var);
L = bias - 2*sqrt(v);
U = bias + 2*sqrt(v);
# Plotting frame
df = data.frame("Coord"=colnames(Sim[,1:4]),"Bias"=b,"L"=L,"U"=U);
q = ggplot(data=df) + theme_bw() + geom_linerange(aes(x=Coord,ymin=L,ymax=U)) +
geom_point(aes(x=Coord,y=Bias),color="royalblue");
q = q + labs("x"="Coefficient","y"="Bias") + coord_flip() +
ggtitle("Bias in Coefficient Estimation");
print(q);
q
rho
a = Sim[,1]
b = Sim[,5];
a
b
rho = mean(b)/var(a);
rho
p = mean(rho*(a-mean(a))^2-b);
p
p = mean((rho*(a-mean(a))^2-b)^2);
p
q = mean(b);
q
vLMVR = function(a,b){
# Rho
rho = mean(b)/var(a);
# Numerator
p = mean((rho*(a-mean(a))^2-b)^2);
# Denominator
q = mean(b);
# Output
return(p/q);
}
mean(a)
rho
tau = log(est/v);
tau
est.v = plyr::aaply(Sim[,5:8],.margins=2,.fun=mean);
tau = log(est/v);
est.v
tau = log(est.v/v);
tau
tau.v = c(vLMVR(a=Sim[,1],b=Sim[,5]),vLMVR(a=Sim[,2],b=Sim[,6]),
vLMVR(a=Sim[,3],b=Sim[,7]),vLMVR(a=Sim[,4],b=Sim[,8]));
tau.v
L = tau - 2*sqrt(tau.v);
L
U = tau + 2*sqrt(tau.v);
U
tau
df = data.frame("Coord"=colnames(Sim[,1:4]),"Rho"=exp(tau),"L"=exp(L),"U"=exp(U));
df
q = ggplot(data=df) + theme_bw() + geom_linerange(aes(x=Coord,ymin=L,ymax=U)) +
geom_point(aes(x=Coord,y=Bias),color="coral");
q
q = ggplot(data=df) + theme_bw() + geom_linerange(aes(x=Coord,ymin=L,ymax=U)) +
geom_point(aes(x=Coord,y=Rho),color="coral");
q
q = q + geom_hline(yintercept=1,color="gray",linetype="dashed");
q
# Plotting frame
df = data.frame("Coord"=colnames(Sim[,1:4]),"Rho"=exp(tau),"L"=exp(L),"U"=exp(U));
q = ggplot(data=df) + theme_bw() + geom_linerange(aes(x=Coord,ymin=L,ymax=U)) +
geom_point(aes(x=Coord,y=Rho),color="coral");
q = q + geom_hline(yintercept=1,color="gray",linetype="dashed");
q = q + labs("x"="Coefficient","y"="Rho") + coord_flip() +
ggtitle("Ratio of Estimated to Empirical Variance");
print(q);
q
# Add library path
library(devtools);
library(roxygen2);
# Creates package
# devtools::create("BinaryModels");
setwd("~/Dropbox/Computation/Packages/BinaryModels/BinaryModels/");
## Example data
# Covariates
# devtools::use_data(X);
# Genotypes
# devtools::use_data(G);
# Phenotypes
# devtools::use_data(Y);
## Vignette
# devtools::use_vignette("BinaryModels");
# Use Rcpp
# usethis::use_rcpp();
# Rcpp::sourceCpp(file="src/Probit.cpp");
## Documents package
devtools::document();
# Check package
# devtools::check();
# Install
setwd("..");
devtools::install(pkg="BinaryScoreTest",reload=T);
# Add library path
library(devtools);
library(roxygen2);
# Creates package
# devtools::create("BinaryModels");
setwd("~/Dropbox/Computation/Packages/BinaryModels/BinaryModels/");
## Example data
# Covariates
# devtools::use_data(X);
# Genotypes
# devtools::use_data(G);
# Phenotypes
# devtools::use_data(Y);
## Vignette
# devtools::use_vignette("BinaryModels");
# Use Rcpp
# usethis::use_rcpp();
# Rcpp::sourceCpp(file="src/Probit.cpp");
## Documents package
devtools::document();
# Check package
# devtools::check();
# Install
setwd("..");
devtools::install(pkg="BinaryModels",reload=T);
# Add library path
library(devtools);
library(roxygen2);
# Creates package
# devtools::create("BinaryModels");
setwd("~/Dropbox/Computation/Packages/BinaryModels/BinaryModels/");
## Example data
# Covariates
# devtools::use_data(X);
# Genotypes
# devtools::use_data(G);
# Phenotypes
# devtools::use_data(Y);
## Vignette
# devtools::use_vignette("BinaryModels");
# Use Rcpp
# usethis::use_rcpp();
# Rcpp::sourceCpp(file="src/Probit.cpp");
## Documents package
devtools::document();
# Check package
# devtools::check();
# Install
setwd("..");
devtools::install(pkg="BinaryModels",reload=T);
A = require(foreach);
A
C1 = require(foreach);
C2 = require(ggplot2) & require(plyr);
C2
# Add library path
library(devtools);
library(roxygen2);
# Creates package
# devtools::create("BinaryModels");
setwd("~/Dropbox/Computation/Packages/BinaryModels/BinaryModels/");
## Example data
# Covariates
# devtools::use_data(X);
# Genotypes
# devtools::use_data(G);
# Phenotypes
# devtools::use_data(Y);
## Vignette
# devtools::use_vignette("BinaryModels");
# Use Rcpp
# usethis::use_rcpp();
# Rcpp::sourceCpp(file="src/Probit.cpp");
## Documents package
devtools::document();
# Check package
# devtools::check();
# Install
setwd("..");
devtools::install(pkg="BinaryModels",reload=T);
devtools::check();
setwd("~/Dropbox/Computation/Packages/BinaryModels/BinaryModels/");
devtools::check();
library(BinaryModels);
# Add library path
library(devtools);
library(roxygen2);
# Creates package
# devtools::create("BinaryModels");
setwd("~/Dropbox/Computation/Packages/BinaryModels/BinaryModels/");
## Vignette
# devtools::use_vignette("BinaryModels");
# Use Rcpp
# usethis::use_rcpp();
# Rcpp::sourceCpp(file="src/Probit.cpp");
## Documents package
devtools::document();
# Check package
# devtools::check();
# Install
setwd("..");
devtools::install(pkg="BinaryModels",reload=T);
devtools::check();
setwd("~/Dropbox/Computation/Packages/BinaryModels/BinaryModels/");
devtools::check();
knitr::opts_chunk$set(fig.width=2*3, fig.height=1.5*2, fig.align="center", fig.path='Figs/',echo=T, warning=F, message=F, cache=T, results='hold');
# Packages
library(BinaryModels);
C1 = require(foreach);
C2 = require(ggplot2) & require(plyr);
# Observations
n = 1e3;
# MC replicates
R = 1e3;
# Regression Coefficients
gamma = (qnorm(0.975))/sqrt(n);
beta = gamma*c(1,1,1);
# Simulation
Sim = foreach(r=1:R,.combine=rbind) %do% {
# Draw covariates
x1 = rnorm(n);
x2 = rt(n,df=3)/sqrt(3);
x3 = (rchisq(n,df=2)-2)/2;
X = cbind(x1,x2,x3);
# Linear predictor
eta = X %*% beta;
# Outcome
y = probitSim(eta);
# Fit probit model
M = fitProbit(y=y,X=X);
# Coefficients
b = M$Beta;
names(b) = paste0("b",seq(from=0,to=3));
# Variance estimates
v = diag(M$Var);
names(v) = paste0("v",seq(from=0,to=3));
# Output
Out = c(b,v);
return(Out);
}
library(ggplot2);
# Assess bias
bhat = plyr::aaply(Sim[,1:4],.margins=2,.fun=mean);
bias = bhat - c(0,beta);
# Confidence intervals
v = plyr::aaply(Sim[,1:4],.margins=2,.fun=var);
L = bias - 2*sqrt(v);
U = bias + 2*sqrt(v);
# Plotting frame
df = data.frame("Coord"=colnames(Sim[,1:4]),"Bias"=b,"L"=L,"U"=U);
q = ggplot(data=df) + theme_bw() + geom_linerange(aes(x=Coord,ymin=L,ymax=U)) +
geom_point(aes(x=Coord,y=Bias),color="royalblue");
q = q + labs("x"="Coefficient","y"="Bias") + coord_flip() +
ggtitle("Bias in Coefficient Estimation");
print(q);
#' Function to calculate variance of log mean-variance ratio
#' @param a Point parameter estimates
#' @param b Variance estimates
vLMVR = function(a,b){
# Rho
rho = mean(b)/var(a);
# Numerator
p = mean((rho*(a-mean(a))^2-b)^2);
# Denominator
q = mean(b);
# Output
return(p/q);
}
# Mean variance estimate
est.v = plyr::aaply(Sim[,5:8],.margins=2,.fun=mean);
# Log ratio of estimated to empirical variance
tau = log(est.v/v);
# Variance estimates
tau.v = c(vLMVR(a=Sim[,1],b=Sim[,5]),vLMVR(a=Sim[,2],b=Sim[,6]),
vLMVR(a=Sim[,3],b=Sim[,7]),vLMVR(a=Sim[,4],b=Sim[,8]));
# Confidence intervals
L = tau - 2*sqrt(tau.v);
U = tau + 2*sqrt(tau.v);
# Plotting frame
df = data.frame("Coord"=colnames(Sim[,1:4]),"Rho"=exp(tau),"L"=exp(L),"U"=exp(U));
q = ggplot(data=df) + theme_bw() + geom_linerange(aes(x=Coord,ymin=L,ymax=U)) +
geom_point(aes(x=Coord,y=Rho),color="coral");
q = q + geom_hline(yintercept=1,color="gray",linetype="dashed");
q = q + labs("x"="Coefficient","y"="Rho") + coord_flip() +
ggtitle("Ratio of Estimated to Empirical Variance");
print(q);
devtools::check();
set.seed(100);
knitr::opts_chunk$set(fig.width=2*3, fig.height=1.5*2, fig.align="center", fig.path='Figs/',echo=T, warning=F, message=F, cache=T, results='hold');
# Packages
library(BinaryModels);
C1 = require(foreach);
C2 = require(ggplot2) & require(plyr);
# Observations
n = 1e3;
# MC replicates
R = 1e3;
# Regression Coefficients
gamma = (qnorm(0.975))/sqrt(n);
beta = gamma*c(1,1,1);
# Simulation
set.seed(100);
Sim = foreach(r=1:R,.combine=rbind) %do% {
# Draw covariates
x1 = rnorm(n);
x2 = rt(n,df=3)/sqrt(3);
x3 = (rchisq(n,df=2)-2)/2;
X = cbind(x1,x2,x3);
# Linear predictor
eta = X %*% beta;
# Outcome
y = probitSim(eta);
# Fit probit model
M = fitProbit(y=y,X=X);
# Coefficients
b = M$Beta;
names(b) = paste0("b",seq(from=0,to=3));
# Variance estimates
v = diag(M$Var);
names(v) = paste0("v",seq(from=0,to=3));
# Output
Out = c(b,v);
return(Out);
}
b
knitr::opts_chunk$set(fig.width=2*3, fig.height=1.5*2, fig.align="center", fig.path='Figs/',echo=T, warning=F, message=F, cache=T, results='hold');
# Packages
library(BinaryModels);
C1 = require(foreach);
C2 = require(ggplot2) & require(plyr);
# Observations
n = 1e3;
# MC replicates
R = 1e3;
# Regression Coefficients
gamma = (qnorm(0.975))/sqrt(n);
beta = gamma*c(1,1,1);
# Simulation
set.seed(100);
Sim = foreach(r=1:R,.combine=rbind) %do% {
# Draw covariates
x1 = rnorm(n);
x2 = rt(n,df=3)/sqrt(3);
x3 = (rchisq(n,df=2)-2)/2;
X = cbind(x1,x2,x3);
# Linear predictor
eta = X %*% beta;
# Outcome
y = probitSim(eta);
# Fit probit model
M = fitProbit(y=y,X=X);
# Coefficients
b = M$Beta;
names(b) = paste0("b",seq(from=0,to=3));
# Variance estimates
v = diag(M$Var);
names(v) = paste0("v",seq(from=0,to=3));
# Output
Out = c(b,v);
return(Out);
}
library(ggplot2);
# Assess bias
bhat = plyr::aaply(Sim[,1:4],.margins=2,.fun=mean);
bias = bhat - c(0,beta);
# Confidence intervals
v = plyr::aaply(Sim[,1:4],.margins=2,.fun=var);
L = bias - 2*sqrt(v);
U = bias + 2*sqrt(v);
# Plotting frame
df = data.frame("Coord"=colnames(Sim[,1:4]),"Bias"=bias,"L"=L,"U"=U);
q = ggplot(data=df) + theme_bw() + geom_linerange(aes(x=Coord,ymin=L,ymax=U)) +
geom_point(aes(x=Coord,y=Bias),color="royalblue");
q = q + labs("x"="Coefficient","y"="Bias") + coord_flip() +
ggtitle("Bias in Coefficient Estimation");
print(q);
#' Function to calculate variance of log mean-variance ratio
#' @param a Point parameter estimates
#' @param b Variance estimates
vLMVR = function(a,b){
# Rho
rho = mean(b)/var(a);
# Numerator
p = mean((rho*(a-mean(a))^2-b)^2);
# Denominator
q = mean(b);
# Output
return(p/q);
}
# Mean variance estimate
est.v = plyr::aaply(Sim[,5:8],.margins=2,.fun=mean);
# Log ratio of estimated to empirical variance
tau = log(est.v/v);
# Variance estimates
tau.v = c(vLMVR(a=Sim[,1],b=Sim[,5]),vLMVR(a=Sim[,2],b=Sim[,6]),
vLMVR(a=Sim[,3],b=Sim[,7]),vLMVR(a=Sim[,4],b=Sim[,8]));
# Confidence intervals
L = tau - 2*sqrt(tau.v);
U = tau + 2*sqrt(tau.v);
# Plotting frame
df = data.frame("Coord"=colnames(Sim[,1:4]),"Rho"=exp(tau),"L"=exp(L),"U"=exp(U));
q = ggplot(data=df) + theme_bw() + geom_linerange(aes(x=Coord,ymin=L,ymax=U)) +
geom_point(aes(x=Coord,y=Rho),color="coral");
q = q + geom_hline(yintercept=1,color="gray",linetype="dashed");
q = q + labs("x"="Coefficient","y"="Rho") + coord_flip() +
ggtitle("Ratio of Estimated to Empirical Variance");
print(q);
knitr::opts_chunk$set(fig.width=2*3, fig.height=1.5*2, fig.align="center", fig.path='Figs/',echo=T, warning=F, message=F, cache=T, results='hold');
# Packages
library(BinaryModels);
C1 = require(foreach);
C2 = require(ggplot2) & require(plyr);
# Observations
n = 1e3;
# MC replicates
R = 1e3;
# Regression Coefficients
gamma = (qnorm(0.975))/sqrt(n);
beta = gamma*c(1,1,1);
# Simulation
set.seed(200);
Sim = foreach(r=1:R,.combine=rbind) %do% {
# Draw covariates
x1 = rnorm(n);
x2 = rt(n,df=3)/sqrt(3);
x3 = (rchisq(n,df=2)-2)/2;
X = cbind(x1,x2,x3);
# Linear predictor
eta = X %*% beta;
# Outcome
y = probitSim(eta);
# Fit probit model
M = fitProbit(y=y,X=X);
# Coefficients
b = M$Beta;
names(b) = paste0("b",seq(from=0,to=3));
# Variance estimates
v = diag(M$Var);
names(v) = paste0("v",seq(from=0,to=3));
# Output
Out = c(b,v);
return(Out);
}
library(ggplot2);
# Assess bias
bhat = plyr::aaply(Sim[,1:4],.margins=2,.fun=mean);
bias = bhat - c(0,beta);
# Confidence intervals
v = plyr::aaply(Sim[,1:4],.margins=2,.fun=var);
L = bias - 2*sqrt(v);
U = bias + 2*sqrt(v);
# Plotting frame
df = data.frame("Coord"=colnames(Sim[,1:4]),"Bias"=bias,"L"=L,"U"=U);
q = ggplot(data=df) + theme_bw() + geom_linerange(aes(x=Coord,ymin=L,ymax=U)) +
geom_point(aes(x=Coord,y=Bias),color="royalblue");
q = q + labs("x"="Coefficient","y"="Bias") + coord_flip() +
ggtitle("Bias in Coefficient Estimation");
print(q);
#' Function to calculate variance of log mean-variance ratio
#' @param a Point parameter estimates
#' @param b Variance estimates
vLMVR = function(a,b){
# Rho
rho = mean(b)/var(a);
# Numerator
p = mean((rho*(a-mean(a))^2-b)^2);
# Denominator
q = mean(b);
# Output
return(p/q);
}
# Mean variance estimate
est.v = plyr::aaply(Sim[,5:8],.margins=2,.fun=mean);
# Log ratio of estimated to empirical variance
tau = log(est.v/v);
# Variance estimates
tau.v = c(vLMVR(a=Sim[,1],b=Sim[,5]),vLMVR(a=Sim[,2],b=Sim[,6]),
vLMVR(a=Sim[,3],b=Sim[,7]),vLMVR(a=Sim[,4],b=Sim[,8]));
# Confidence intervals
L = tau - 2*sqrt(tau.v);
U = tau + 2*sqrt(tau.v);
# Plotting frame
df = data.frame("Coord"=colnames(Sim[,1:4]),"Rho"=exp(tau),"L"=exp(L),"U"=exp(U));
q = ggplot(data=df) + theme_bw() + geom_linerange(aes(x=Coord,ymin=L,ymax=U)) +
geom_point(aes(x=Coord,y=Rho),color="coral");
q = q + geom_hline(yintercept=1,color="gray",linetype="dashed");
q = q + labs("x"="Coefficient","y"="Rho") + coord_flip() +
ggtitle("Ratio of Estimated to Empirical Variance");
print(q);
